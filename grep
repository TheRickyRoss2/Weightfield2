Carriers.cxx:  //  cout << "Choosing Incidente particle " << endl;
Carriers.cxx:  //  cout << "Detector Type = " << gui->CallGetDetType()<< endl;
Carriers.cxx:  cout << "Tracking one e/h pair for every " << chargescale << " pairs" << endl;
Carriers.cxx:	  cout<<"Angle set at = 45 deg"<<endl;
Carriers.cxx:      cout<<"Incidente Angle = "<< gui->GetAngle() << " Degrees " << endl;
Carriers.cxx:      if (!UserUniformQFlag && !ConstQFlag && !UniformQFlag && CoutFlag)  cout << "MIP non-uniform charge deposition and Landau amplitude " << endl;
Carriers.cxx:      if (!UserUniformQFlag && ConstQFlag  && !UniformQFlag && CoutFlag)  cout << "MIP non-uniform charge deposition and Fixed amplitude " << endl;
Carriers.cxx:      if (!UserUniformQFlag && ConstQFlag  &&  UniformQFlag && CoutFlag)   cout << "MIP uniform charge deposition " << endl;
Carriers.cxx:      if ( UserUniformQFlag && CoutFlag)   cout << "MIP uniform charge deposition with User Charge = " << gui->GetChargeEntry() << " pairs/micron" << endl;
Carriers.cxx:		  //		  if (!ConstQFlag && CoutFlag)  cout << "Pairs in each 5-um layer: " << endl;	  
Carriers.cxx:		  // cout << "Last bin rescaled by = " <<  LastBinRescale << endl;
Carriers.cxx:	      //	      if (!ConstQFlag ) cout <<  " ll = " << ll << " " << PairsPer5Micron[ll]<< ", " ;
Carriers.cxx:	      //	  if ( CoutFlag) cout << "MIP Non uniform Q with Qtot = " << AvPair << " pairs*um = " 
Carriers.cxx:	      if (PartNum == 0) cout << "# of particles from Landau MPV per micron MPV  = " << 1000*mpv/(3.6) << ",  Width = "  << 1000*DA/(3.6) << endl;
Carriers.cxx:	      // cout << "Initial Total Pairs = " << NTotPairs << " Landau normalization constant = " <<  NormConstFlag << " Value of Landau: = "<< (1000*LanConst*d/3.6) << endl;
Carriers.cxx:	      //	      cout << " i = " << mm << " particles =  " << PairsPer5Micron[mm] <<  " iter = " << NPairsPer5Micron[mm]  <<endl;
Carriers.cxx:	  //		cout << " i = " << mm << " particles =  " << PairsPer5Micron[mm] << endl;
Carriers.cxx:	      //   cout << "electron " << i << " at y = " << ypos << endl;	      
Carriers.cxx:	      // cout << "super-holes" << endl;
Carriers.cxx:	      // cout << "hole " << TotPairs +i << " at y = " << carriers[TotPairs+i].Gety() << endl;
Carriers.cxx:	      //cout<<"pot.getymax= "<<pot.GetYMAX()*pot.GetBinSizey()<<endl;
Carriers.cxx:	  //	  cout << "Calculating Ellipses " << mm << endl;
Carriers.cxx:	  //	  cout << Elypos << endl;
Carriers.cxx:      //      cout << "Updating Canvas " << endl;
Carriers.cxx:      if ( CoutFlag)      cout << "Total number of pairs = " << SumPairs*chargescale << endl;
Carriers.cxx:  //  cout <<  " pot.Getpitch() " << pot.Getpitch() << " pot.Getwidth() " << pot.Getwidth() << endl; 
Carriers.cxx:      cout<<"Maximum angle = 45 deg"<<endl;
Carriers.cxx:      //      cout << pot.Getmipcharge()+i << " From Tot" << endl;
Carriers.cxx:      // cout << carriers[i].Gety() << " " << carriers[pot.Getmipcharge()+i].Gety()<< endl;
Carriers.cxx:  if ( CoutFlag)	cout << "Alpha range from " << carriers[1].Gety() << " to "<<carriers[pot.Getmipcharge()-1].Gety()<<endl;
Carriers.cxx:  if ( CoutFlag)	cout << "Alpha Energy " <<  ALPHAENERGY*1e-6 << " MeV"<<endl;
Carriers.cxx:  if (!gui->GetLess2DPlot())   cout << "Updating Canvas, Drawing Ellipses " << endl;
Carriers.cxx:  //  cout <<  " pot.Getpitch() " << pot.Getpitch() << " pot.Getwidth() " << pot.Getwidth() << endl; 
Carriers.cxx:      cout<<"Maximum angle = 45 deg"<<endl;
Carriers.cxx:  cout<<"Angle = "<<angle<<endl;
Carriers.cxx:      //      cout << carriers[pot.Getmipcharge()+i].Gety() << " " << carriers[pot.Getmipcharge()+i].Getx() << endl;
Carriers.cxx:      //    cout << carriers[i].Gety() << " " << carriers[pot.Getmipcharge()+i].Gety()<< endl;
Carriers.cxx:  if ( CoutFlag)	cout << "Alpha range from " << carriers[1].Gety() << " to "<<carriers[pot.Getmipcharge()-1].Gety()<<endl;
Carriers.cxx:  if ( CoutFlag)	cout << "Alpha Energy " <<  ALPHAENERGY*1e-6 << " MeV"<<endl;
Carriers.cxx:  if (!gui->GetLess2DPlot())   cout << "Updating canvas, Drawing Ellipses " << endl;
Carriers.cxx:  //  cout <<  " pot.Getpitch() " << pot.Getpitch() << " pot.Getwidth() " << pot.Getwidth() << endl; 
Carriers.cxx:	    //	    cout << "i =" << i << " x-edge " << xpos<< " y " << ypos <<endl;
Carriers.cxx:	    //      cout << pot.Getmipcharge()+i << " From Tot" << endl;
Carriers.cxx:	    // cout << carriers[i].Gety() << " " << carriers[pot.Getmipcharge()+i].Gety()<< endl;
Carriers.cxx:    if (!gui->GetLess2DPlot())   cout << "Updating Canvas, Drawing Ellipses " << endl;
Carriers.cxx:  //  cout <<  " pot.Getpitch() " << pot.Getpitch() << " pot.Getwidth() " << pot.Getwidth() << endl; 
Carriers.cxx:      cout<<"Maximum angle = 45 deg"<<endl;
Carriers.cxx:      //      cout << pot.Getmipcharge()+i << " From Tot" << endl;
Carriers.cxx:      // cout << carriers[i].Gety() << " " << carriers[pot.Getmipcharge()+i].Gety()<< endl;
Carriers.cxx:  if ( CoutFlag)	cout << "X-Ray range from " << carriers[1].Gety() << " to "<<carriers[pot.Getmipcharge()-1].Gety()<<endl;
Carriers.cxx:  if (!gui->GetLess2DPlot())   cout << "Updating Canvas, Drawing Ellipses " << endl;
Carriers.cxx:		cout<<"Unable to open "<<fileName<< " file"<<endl;
Carriers.cxx:	// cout << "TimeUNit" << TIMEUNIT << endl;
Carriers.cxx:	//	cout << "FirstfreeSlot = " << firstfreeslot << endl;
Carriers.cxx:	//	cout << " beta e = " << beta_e << " beta h = " << beta_h << endl;
Carriers.cxx:	// cout << " Theta1 "<< theta1 << " theta2 " << theta2 << endl;
Carriers.cxx:	//	cout << "Gain starts at = " <<  gui->Getygainlow() <<  " and ends at = " << gui->Getygainhigh() << endl;
Carriers.cxx:	    cout << "Mobility e = " << mu_e << " [m2/(V*s)]" << " Mobility h = " << mu_h << " [m2/(V*s)]"<< endl;
Carriers.cxx:	    cout << "V Saturation:  e = " << Vsat_e(Temp, gui->CallGetDetType()) << " [m/s]"<<  "  h = " << Vsat_h(Temp,gui->CallGetDetType() ) << " [m/s]"<<endl;
Carriers.cxx:	    cout << "Maximum time limit simulated " << TMAX*TIMEUNIT*1e9 << " nanoseconds "<<endl;
Carriers.cxx:	//	cout << BBImp<< endl;
Carriers.cxx:	//	cout << "Ratio alpha/omega = " << alpha_LCR/omega_LCR << " " << alpha_LCR << " " << omega_LCR <<  endl;
Carriers.cxx:	//	cout << "s1,s2 = "  << s_1_LCR << " " << s_2_LCR <<  endl;
Carriers.cxx:	    //	    cout << "Predicted System Tau (C_det * R=50 Ohm)= " << tau_CSA_RC*1e9tau_CSA_RC*1e9 << " ns" << endl;
Carriers.cxx:	    cout << "Oscilloscope  BW = " << gui->GetOscBW() << " GHz" << endl;
Carriers.cxx:	    cout << "CSA Int. Time (10-90 %)= " <<  TRise*1e9 << " ns" << endl;
Carriers.cxx:	    cout << "CSA Fall Time = " << TFall*1e9 << " ns" << endl;
Carriers.cxx:	    cout << "Noise (Assuming square pixel) = " << Noise << " ENC" << endl;
Carriers.cxx:	    //	    cout << "Shaper Threshold set at VTh = " << VTh << " fQ" << endl;
Carriers.cxx:	    //	    cout << "CSA Threshold set at VTh = " << CSAVth << " mV" << endl;
Carriers.cxx:	    //	  cout << i << " -20 " << gui->Getchist()->GetMaximumStored() << endl;
Carriers.cxx:	    //	    cout<< "t= "<<i<<" firstfreeslot="<<firstfreeslot<<endl;
Carriers.cxx:	  //	  cout << "carrierslimit = " << carrierslimit << endl;
Carriers.cxx:			// if (j<10) cout << tempdf1[(int)carriers[j].Gety()][(int)carriers[j].Getx()].GetFieldy() << " " << ExChargeCloud <<endl;;
Carriers.cxx:			//	cout << (int)carriers[j].Getx() << " " <<  (int)carriers[j].Gety() << " " << gui->GetExhist()->GetBinContent((int)carriers[j].Getx(), (int)carriers[j].Gety()) << endl;
Carriers.cxx:			    //  cout << rand<< " " << LONGDIF << " " << LONGDIF*DiffDistance << endl;
Carriers.cxx:			    //			    cout <<  " diffusion " << LONGDIF << " " << LONGDIF*DiffDistance << endl;
Carriers.cxx:			    // cout <<  " diffusion " << LONGDIF << " " << LONGDIF*DiffDistance <<  " xold = " << carriers[j].Getx() << " xnew = " << xnew << endl;
Carriers.cxx:		    // cout << "cBinx - biny = "<< binx << " " << biny << " Gety " << carriers[j].Gety() << " binsize " << pot.GetBinSizey() << endl ;
Carriers.cxx:		    //  cout << j << " ie " << ie[i] << " ih " << ih[i] << " x,y= " << (int)carriers[j].Gety() << ","<< (int) carriers[j].Getx() 
Carriers.cxx:			//	cout << "Binxnew = " << Binxnew << " Binynew = " << Binynew << endl;
Carriers.cxx:			//			cout <<" particle = " << j <<  " x,y = " << xnew <<" ," << ynew << " charge = "
Carriers.cxx:			//   cout << " x = " << xnew << " y  = " << ynew << " distance = "<< dist 
Carriers.cxx:			//	if (j == 100 ) cout << " j = " << j <<  " LocalE = " << LocalE << " gain = " << gain << " yold = " << yold <<   " ynew-yold = "
Carriers.cxx:			//			if (carriers[j].GetCharge() == -1 && j == 300) cout  <<   " j= " << j  << " y = " << carriers[j].Gety() << " x = " <<  carriers[j].Getx() << " Local E = " << LocalE*1e-5  << " + " << derivy*disty*1e-5  << " [kV/cm] Step = " << d << " [micron];  Gain = " << gain << endl;
Carriers.cxx:			    cout << "Local E = " << LocalE*1e-5 << " [kV/cm] Step = " << d << " [micron];  Gain = " << gain<< endl;
Carriers.cxx:			    if (d> 0.5) cout << "The step is too long, increase the sampling rate" << endl;
Carriers.cxx:			    cout << "The diode is in breakdown!" <<endl;
Carriers.cxx:			    cout << "Reduce the gain to continue" <<endl;
Carriers.cxx:			//			if (CrossedGain)  cout << " j = " << j << " Gain = " << gain << " ngain = " << ngain << " Leftover = " << gain-ngain << endl;
Carriers.cxx:			    cout << " Warning: " << endl;
Carriers.cxx:			    cout << " Carriers array at the limit, the program stops" << endl;
Carriers.cxx:			    cout << " Reduce your Gain Scale " << endl;
Carriers.cxx:			    cout << " You created more than "  << firstfreeslot/2 << " particles" << endl;
Carriers.cxx:			   //cout<<"firstfreeslot= "<<firstfreeslot<<endl;
Carriers.cxx:				//				cout << " i = " << i << " Time = " << i*TIMEUNIT <<  " particle = " << j << " in = " << ynew << " with Gain = " << ngain <<" First free slot= " << firstfreeslot << endl;
Carriers.cxx:			//			cout << "Outside gain layer loop" << endl;
Carriers.cxx:			// cout << "Skipping j = " << j << " with ynew = " << ynew << endl;
Carriers.cxx:			cout << "CCE effects on, Fluence = " << gui->GetFluence() << " [10^14 neq /cm^2]" << endl;
Carriers.cxx:                          cout << "ATTENTION: For fluences above 10^14 neq/cm^2 the trapping probability is not longer correctly parametrized only as linearly dependent on the fluence, in this case a voltage dependent term should be added" << endl;
Carriers.cxx:                          cout << "No significant trapping effects are present with such a low fluence" << endl;
Carriers.cxx:			//cout<<trapping_probability_electrons<< random_number << endl;
Carriers.cxx:		//		cout << " Time t = " << i << " " << yqmin << " < yq < " << yqmax << " " << xqmin << " < xq < " << xqmax << endl;
Carriers.cxx:			//  cout << " Time t = " << i << " at yq = " << yq << " Q = "  << LocalQy << endl;
Carriers.cxx:	    //cout << ie[i] << " " << ih[i] << " " << ieg[i] << " " << ihg[i] << " " << qtot << endl;
Carriers.cxx:	    // cout <<"Active particles = " <<  ActiveCarriers << endl;
Carriers.cxx:		  cout << " ========= Results =================" << endl;	
Carriers.cxx:		cout << "Current at 0 in  = " << IMax*TIMEUNIT*1e9 << " nanoseconds. Still active carriers = " << ActiveCarriers << endl;
Carriers.cxx:			//			cout << " xqmin, xqmax Hoffset " << xqmin << " " << xqmax << " " << Hoffset << endl;
Carriers.cxx:			cout << pot.GetYMAX() << " " <<  pot.GetBinSizey() << endl;
Carriers.cxx:		    //cout <<  ss.str() << endl;		    
Carriers.cxx:	    // cout  << QAverage << " Qtot = " << qtot << " Qe = " << qe << " Qh = " << qh << " Qe + Qh = " << qe+qh  <<" qeg = " << qeg << " " << qhg << endl;
Carriers.cxx:	    if (gui->GetForceGain())  cout << "Forced gain: Gain in simulation = " << qtot/(qe+qh)  <<  " Gain after corrections  = " << GainScale*(qeg+qhg)/(qe+qh)+1 << " Gain requested = "<< gui->GetYGain()  << endl;
Carriers.cxx:		cout << "Gain in simulation = " << qtot/(qe+qh)  << endl;
Carriers.cxx:		//cout <<  ss.str() << endl;		    
Carriers.cxx:	//	cout << "Charge collected = " << qtot << endl;
Carriers.cxx:	//	cout  << "Qtot = " << qtot << " Qe = " << qe << " Qh = " << qh << " Qe + Qh = " << qe+qh  <<" qeg = " << qeg << " " << qhg << endl;
Carriers.cxx:		    //		    if (i==0) std::cout << "itot = " << itot[i] << " " << i+ll << " " << PreAmp_Q[i+ll] << " " << TIMEUNIT << " " << tau_CSA_RC << std::endl;
Carriers.cxx:		  // cout << i << " " << Step << " " << Idif << " " << Iout_C50[i] << " " <<  Iout_C50[i-Step] << " " << Iout_Scope[i] << endl;
Carriers.cxx:	    //	    cout << "Shaper Max " << sh_max << endl;
Carriers.cxx:		//cout << ShaperOut_V[i] << endl;
Carriers.cxx:			//    cout << Iout04 << " " << NMax04_BB << endl;
Carriers.cxx:			//    cout << Iout04 << " " << NMax04_BB << endl;
Carriers.cxx:		//		cout << itot_max << " scope " << Iout_max_Scope << endl;
Carriers.cxx:	    //	    cout << BB_Noise << " " << NMax04_BB << " " << BBout04 << endl;
Carriers.cxx:	    //	    cout << BBout_max << " " << NMax_BB << " " << BBout04 << endl;
Carriers.cxx:	    // cout << BBout_min << " " << Nmin_BB << " " << BBout04 << endl;
Carriers.cxx:	    cout << "Signal Area = " << fabs(OscArea) <<  " [pVs] " << endl;
Carriers.cxx:	    cout << "Collected charge = " << OscArea/50*1e3 <<  " [fC] "  << endl;
Carriers.cxx:	    cout << "Average Current = " << OscArea/50/(IMax*TIMEUNIT)*1e-6 <<  " [uA] "  << endl;
Carriers.cxx:	    cout << "Preamp. Current Rise time 10%-90% (R = 50 Ohm)  = " << SysTr <<  " [ns] " << endl;
Carriers.cxx:	    cout << "System Rise tau: predicted (from R = 50 * C) = "<< tau_C50*1e9 << " simulated = " << SysTau <<  " [ns] " << endl;
Carriers.cxx:	    cout << "Simul. System Rise BW  = " << SysBW <<  " [GHz] " << endl;
Carriers.cxx:	    cout << "Scope Rise time 10%-90% (RC+BW)  = " << TotTr <<  " [ns] " << endl;
Carriers.cxx:	    //	    cout << "Optimized Jitter  2 mV*sqrt(BB Tr)/sqrt(Sys Tr)/dV/dt = " << OPJitter <<  " [ns] " << endl;
Carriers.cxx:		cout<<"Exiting currents calculation"<<endl;
Carriers.cxx:	    // cout << "Noise CSA = " << CSAx1 << " , " <<CSAx2 << endl;
Carriers.cxx:	    // cout << "Noise BB = " << BBx1 << " , " << BBx2 << endl;
Carriers.cxx:	    cout << "BB Vth = " << BBVth << endl;
Carriers.cxx:	    cout << "CSA Vth = " << CSAVth << endl; 
Carriers.cxx:		    //	    cout <<  "i =  " << i << " BBX1 " << BBx1 <<" "  << BBGraph[i+DStep] << " " << BBGraph[i-DStep] << endl;
Carriers.cxx:	    cout << endl;
Carriers.cxx:	    cout << "Charge Sensitive Amplifier:" << endl;
Carriers.cxx:	    cout << "CSA dV/dt  = " <<  CSA_dVdt <<  " [mV/ns] " << endl;
Carriers.cxx:	    cout << "CSA dV/dt (80-20)% = " <<  CSA_dVdt20_80 << " [mV/ns]" << endl;
Carriers.cxx:	    cout << "CSA dV/dt at Vth Crossing = " <<  CSA_dVdt_atVth << " [mV/ns] (including the effect of noise)" << endl;
Carriers.cxx:	    cout << "CSA dV/dt at 20%  = " <<    CSA_dVdt_at20pc << " [mV/ns]" << endl;
Carriers.cxx:	    cout << "CSA dV/dt at 50%  = " <<    CSA_dVdt_at50pc << " [mV/ns]" << endl;
Carriers.cxx:	    cout << "CSA Jitter (80-20)% = " << fabs(CSA_Noise/CSA_dVdt20_80) <<  " [ns] " << endl;
Carriers.cxx:	    cout << "CSA Jitter at Vth = " << fabs(CSA_Noise/CSA_dVdt_atVth) <<  " [ns] " << endl;	    
Carriers.cxx:	    cout << "CSA VTh Time Crossing =  " << gui->GetCSATVth() <<  " and " << gui->GetCSAFTVth() << " [ns]" << endl;
Carriers.cxx:	    cout << "CSA peak at = " << NDer0_sh*TIMEUNIT*1e9 <<  " [ns]"<< endl;
Carriers.cxx:	    cout << "CSA Maximum = " <<( (fabs(sh_max)> fabs(sh_min)) ?  sh_max:  sh_min) <<  " [mV]"<< endl;	   
Carriers.cxx:	    cout << "CSA Area = " << fabs(CSAArea*1e9) << " [pVs]" << endl;
Carriers.cxx:	    cout << "CSA measured Rise Time (20-80 %) = " <<  CSA_t20_80 << " ns" << endl;
Carriers.cxx:	    cout << "CSA measured Rise Time (10-90 %) = " <<  CSA_t10_90 << " ns" << endl;
Carriers.cxx:	    cout << "CSA design Rise Time (10-90 %) = " <<  TRise*1e9 << " ns" << endl;
Carriers.cxx:	    cout << "CSA design Fall Time (10-90 %) = " << TFall*1e9 << " ns" << endl;
Carriers.cxx:	    cout << "CSA design Peak Time = " << CSA_Tpeak*1e9 << " ns" << endl;
Carriers.cxx:	    cout << "CSA Ballistic Deficit = " << CSA_BallDef << endl;
Carriers.cxx:	    cout << endl;
Carriers.cxx:	    cout << "Broadband:" << endl;
Carriers.cxx:	    cout << "BB dV/dt = " << BB_dVdt <<  " [mV/ns] " << endl;
Carriers.cxx:	    cout << "BB dV/dt (80-20)% = " <<  BB_dVdt20_80 << " [mV/ns]" << endl;
Carriers.cxx:	    cout << "BB dV/dt (t < 0.4 ns) = " << BB04_dVdt <<  " [mV/ns] " << endl;
Carriers.cxx:	    cout << "BB dV/dt at Vth Crossing = " <<  BB_dVdt_atVth << " [mV/ns]  (including the effect of noise)" << endl;
Carriers.cxx:	    cout << "BB dV/dt at 20% = " <<  BB_dVdt_at20pc << " [mV/ns]" << endl;
Carriers.cxx:	    cout << "BB dV/dt at 50% = " <<  BB_dVdt_at50pc << " [mV/ns]" << endl;
Carriers.cxx:	    cout << "BB Jitter (t < 0.4 ns) = " << fabs(BB_Noise/BB04_dVdt) <<  " [ns] " << endl;
Carriers.cxx:	    cout << "BB Jitter (80-20)% = " << fabs(BB_Noise/BB_dVdt20_80) <<  " [ns] " << endl;
Carriers.cxx:	    cout << "BB Jitter at Vth = " << fabs(BB_Noise/BB_dVdt_atVth) <<  " [ns] " << endl;
Carriers.cxx:	    cout << "BB VTh Time Crossing =  " << gui->GetBBTVth() <<  " and " << gui->GetBBFTVth() << " [ns]" << endl;
Carriers.cxx:	    cout << "BB peak at = " << NDer0_BB*TIMEUNIT*1e9 <<  " [ns]"<< endl;
Carriers.cxx:	    cout << "BB Maximum = " << ((fabs(BBout_max)> fabs(BBout_min) ) ? BBout_max :  BBout_min) <<  " [mV]"<< endl;	    
Carriers.cxx:	    cout << "BB Area = " << fabs(BBArea*1e9) << " [pVs]" << endl;
Carriers.cxx:	    cout << "BB Charge = " << 1000*fabs(BBArea*1e9)/(gui->GetBBGain()*gui->GetBBImp()) << " [fC]" << endl;
Carriers.cxx:	cout << endl;
Carriers.cxx:	    cout << "Total number of e-h pair simulated = " << firstfreeslot/2 << endl;	  
Carriers.cxx:	    cout << "Total number of e-h pair  = " << firstfreeslot/2*chargescale << endl;
Carriers.cxx:	  cout << "Electronic pulse" << endl;
Carriers.cxx:	cout<<"================================================================="<<endl;
Carriers.cxx:	    //		cout <<	"  Iout_max_Scope "  << Iout_max_Scope << " , "<< itot_max << endl;
Field.cxx:	  //if (i==10) std::cout <<  j << " " << pot.Getdpot(j,i) << " " << pot.Getdpot(j-1,i) << " " << pot.Getdpot(j,i) - pot.Getdpot(j-1,i) << std::endl;
Field.cxx:  //  std::cout << " CalField bin size y= " << pot.GetBinSizey()*1e-6 << std::endl;  
Potentials.cxx:  // cout << " Multigrid = " << multig << endl;
Potentials.cxx:  // cout << " Multigrid = " <<endl;
Potentials.cxx:  //  cout << " Stepx,y " << Stepx << " " << Stepy << endl; 
Potentials.cxx:  //  cout << " CallC" << endl;
Potentials.cxx:  // cout << bias << endl;
Potentials.cxx:  //  cout << " SetPitch = " << dimy << " " << nstrip << " " << p << " " << w << " Stepx " << Stepx << " stepy " << Stepy << endl;
Potentials.cxx:  // cout<<"1: xmax= "<<tempxmax<<", ymax= "<<tempymax<<endl;
Potentials.cxx:  // cout<<" After grid adjustments xmax= "<<XMAX<<", ymax= "<< YMAX<<endl;
Potentials.cxx:  //   cout << "Bin size x = " << GetBinSizex() << " micron " << endl;
Potentials.cxx:  // cout << "Bin size y = " << GetBinSizey() << " micron " << endl;
Potentials.cxx:  //  cout << "Number of bin: X = " << XMAX<< ", Y =  " << YMAX << endl;
Potentials.cxx:	cout << "One single strip" << endl;
Potentials.cxx:	    cout << (int)(XMAX/2)<< " "  << (int)width/2 << " " << k << endl;
Potentials.cxx:  // cout <<  " binyh2 = " << binyh2 << " StepY = " << gui->GetStepy() << " YMAX/finestY= " << 1.*finestY/YMAX << endl;
Potentials.cxx:	  //	  cout << " err " << sum/((double)(XMAX*YMAX)) << endl;
Potentials.cxx:  // cout << " coefy = " << coefy << endl;
Potentials.cxx:  //  cout << "poissonf = " << poissonf <<  << endl;
Potentials.cxx:  //  cout  << "poissonf = " << poissonf << " Doping/cm^3 = " << poissonf*(EPSILON*EPSILONR)/ECHARGE*1e-6 << endl; // <<== this is correct
Potentials.cxx:  // cout  << "DJ doping ref /cm^3. = " <<  poissondens*(EPSILON*EPSILONR)/ECHARGE*1e-6<< endl;
Potentials.cxx:  // cout  << "Acceptor  doping Value = " <<  Acceptorpoissonf<< endl;
Potentials.cxx:       //      cout << " After removal Doping/cm^3 = " << DopingRem*poissonf*(EPSILON*EPSILONR)/ECHARGE*1e-6 << endl; // <<== this is correct
Potentials.cxx:       //     cout << " Inital Accept Removal Bulk  = " << DopingRem << " Initial Doping: " <<  poissonf*(EPSILON*EPSILONR)/ECHARGE*1e-6  << endl;
Potentials.cxx:	      //	      cout << " y = " << y << "poissonf = " << poissonf*DopingRem << endl;
Potentials.cxx:	      //	      cout << " DJ y-x = " << y << " " << x << " " << dopyx[y][x]<< endl;
Potentials.cxx:  //  cout << XMAX << " XMAX " << YMAX << endl;
Potentials.cxx:	      //	      if (x == 100) cout << y << " NewPot = " << NewPot << " " << dpot[y][x] << endl;
Potentials.cxx:	      // if (x == 180) cout << y << " NewPot = " << NewPot << " " << dpot[y][x] << endl;
Potentials.cxx:      cout << "Gain layer region: " << gui->Getygainlayerlow() << " - " << gui->Getygainlayerhigh() << " micron " << endl;
Potentials.cxx:	  //   cout << " After removal  = " << VdepGainLayer << endl; // <<== this is correct
Potentials.cxx:	  //	  cout << " Inital Acceptor Removal Gain Layer = " << DopingRem << " Initial Doping: " << gui->GetDopinggainlayerValue()*1e-6  << endl;
Potentials.cxx:	  cout << "Fraction of inital acceptor in the gain layer still present = " << DopingRem <<
Potentials.cxx:      //   cout << "Gain Recess = " << gui->GetGainRecess() <<  " bins = "  << GainRecessBins<<  endl;
Potentials.cxx:		  //	  cout << " gain layer thickness: " << dd << endl;
Potentials.cxx:			      //	      cout << " xbin = " << x << " x = "<< x*GetBinSizey()<< endl;
Potentials.cxx:       //       cout << " After removal Doping/cm^3 = " << DopingRem*poissonf*(EPSILON*EPSILONR)/ECHARGE*1e-6 << endl; // <<== this is correct
Potentials.cxx:       cout << "Fraction of inital doping in the bulk still present = " << DopingRem << " Final bulk doping: " <<  DopingRem*poissonf*(EPSILON*EPSILONR)/ECHARGE*1e-6  <<"  N/cm^3 " << endl;
WFGUI.cxx:	cout<< "Processing parameters from file " << ifname <<endl;
WFGUI.cxx:		cout<< "\n***WARNING: Could not open parameter file " << ifname <<endl;
WFGUI.cxx:		cout<< "using DEFAULT values\n" <<endl;
WFGUI.cxx:	    cout << "Gain recess too close to interstrip distance, moved to a shorter recess: " <<  GainIndententry->GetNumber() << " micron" << endl;
WFGUI.cxx:	//cout<<"calc potentials in: dimy= "<<YMAXentry->GetNumber()<<", dimx="<<XMAXentry->GetNumber()<<endl;
WFGUI.cxx:	//	  cout << " CallB" << endl;
WFGUI.cxx:	cout << " ========= Inputs to Simulation =================" << endl;	
WFGUI.cxx:	cout << "Time step in simulation = " << 1./GetSampling()*1e3 << " ps " <<  endl;		
WFGUI.cxx:	cout << "Space mesh in simulation x = " << dwpot.GetBinSizex() << " micron " <<  endl;
WFGUI.cxx:	cout << "Space mesh in simulation y = " << dwpot.GetBinSizey() << " micron " <<  endl;		
WFGUI.cxx:	cout << "Temperature set to = "<< Temp << " Kelvin" << endl;		
WFGUI.cxx:	//cout<<"Flag gain ON = "<<GetGainon()<<endl;
WFGUI.cxx:	//	cout << "Upper detector dimension = "<<dwpot.GetYMAX()<< " micron" << endl;
WFGUI.cxx:	//	cout << "Batch = " << NBatch << endl;
WFGUI.cxx:	    cout << "Processing event " << e << endl;
WFGUI.cxx:		    //		      cout << "Y coordinate out of range, setting it to YMAX/2" << endl; 
WFGUI.cxx:	    //cout << "Status " << radiobuttonstatus<< endl; 
WFGUI.cxx:	    if (GetParticleType() != 7) cout << "Particle hits at " << carriersin << " micron on the x axis" << endl;
WFGUI.cxx:		cout<<"Event Number: "<<e <<endl;
WFGUI.cxx:		// cout << "histo limits = "<<MinTWBB << " " << MaxTWBB << endl;
WFGUI.cxx:			// cout << "Npairs = " << GetNumPairs() << " " << NpairsMax << endl;
WFGUI.cxx:			//				 cout << MaxPairs << " MaxPairs " << endl;
WFGUI.cxx:	if (GetBatchOn() == true) cout<<"Run finished: "<< EventsEntry->GetNumber() <<" events"<<endl;
WFGUI.cxx:	// cout << " NBins = " << NBins << endl;
WFGUI.cxx:	///	cout << "Step  = " << Step  << " NBins " << NBins << endl;
WFGUI.cxx:	    //  cout <<  k  << " q1[k] " << q1[k] << " Npos " << Npos << endl;	    
WFGUI.cxx:	//	cout << "Wherecut = " << wherecut << " wherecutbin = "  << wherecutbin << endl; 
WFGUI.cxx:		cout << " Problem in computing Gain for electrons at  position = " << Npos*dwpot.GetBinSizey() << " micron, LocalGain set to 1 " << endl;
WFGUI.cxx:		cout << " Problem in computing Gain for holes at  position = " << Npos*dwpot.GetBinSizey() << " micron, LocalGain_h set to 1 " << endl;
WFGUI.cxx:	    //  cout << k << endl;
WFGUI.cxx:	//	cout << "Outoftheloops" << endl;
WFGUI.cxx:	if (Mindabs == 0) cout << " Drift Field Amplitude = 0 !! Decrease DJ Current or Increase Bias" << endl;
WFGUI.cxx:	// cout << Maxdabs << endl;
WFGUI.cxx:	//	cout << "Gain = " << Tot_gain << endl;
WFGUI.cxx:		cout<<"Detector with internal gain. Gain region extends from y = "<< Getygainlow() << " to "<<  Getygainhigh() << " micron" <<endl;
WFGUI.cxx:		//   cout << "Ratio h/e gain = " <<  gui->GetGainRatio() << endl;
WFGUI.cxx:		cout<<"Detector without internal gain."<<endl;
WFGUI.cxx:	if (MaxEy*MinEy <0) cout << " Drift Field positive and negative!! Decrease Current or Increase Bias" << endl;
WFGUI.cxx:	  // cout << h << " : " ;
WFGUI.cxx:	//	cout << GetLess2DPlot() << " get less 2D " << endl;
WFGUI.cxx:       //cout << "Number of strips increased to be an  odd number " << endl;
WFGUI.cxx:      //     cout << "Sensor with gain layer, y-step set to 0.1 micron" << endl;
WFGUI.cxx:      cout << "Not enough Vbias to deplete the gain layer" << endl;
WFGUI.cxx:      cout << "The program stops" << endl;
WFGUI.cxx:      //	  cout << " CallA" << endl;
WFGUI.cxx:      cout << "Sensor thickness = " <<  dwpot.GetYMAX()*dwpot.GetBinSizey()  << " micron. Number of bins = " <<  dwpot.GetYMAX() << " Bin size on y = " << dwpot.GetBinSizey() << " micron" << endl;
WFGUI.cxx:      cout << "Sensor total width = " <<   dwpot.GetXMAX()*dwpot.GetBinSizex() << " micron. Number of bins = " <<  dwpot.GetXMAX() << " Bin size on x = " << dwpot.GetBinSizex() << " micron" << endl;
WFGUI.cxx:      //cout <<   dwpot.GetXMAX() << " " << dwpot.GetYMAX()	<< endl;	      
WFGUI.cxx:	//	cout << "CallSetDoping0 bulkdoping " << bulkdoping << endl;
WFGUI.cxx:  if (DJvalue == 0 ) cout << "Linear doping density for the Double Junction computation  " << endl;
WFGUI.cxx:  else  cout << "Step doping density for the Double Junction computation  " << endl;
WFGUI.cxx:	//	cout << "CallSetDoping0 bulkdoping " << bulkdoping << endl;
WFGUI.cxx:	//cout << "Needs to compute the potential again!! " << endl;
WFGUI.cxx:         cout << "Selecting MIP uniform distributed" << endl;
WFGUI.cxx:         cout << "Selecting MIP non uniform distributed with fixed total amplitude" << endl;
WFGUI.cxx:         cout << "Selecting MIP Landau distributed" << endl;
WFGUI.cxx:        cout << "Selecting Laser (1064 nm)" << endl;
WFGUI.cxx:            cout << "Selecting Alpha from top" << endl;
WFGUI.cxx:            cout << "Selecting Alpha from bottom" << endl;
WFGUI.cxx:        cout << "Selecting Electronic Pulse"<< endl;
WFGUI.cxx:        cout << "Selecting Edge Laser"<< endl;
WFGUI.cxx:        cout << "Selecting X-Ray"<< endl;
WFGUI.cxx:	cout << " For the absorption probability see: http://web-docs.gsi.de/~stoe_exp/web_programs/x_ray_absorption/index.php" << endl;
WFGUI.cxx:  //	cout << Step << "Step " << endl;
WFGUI.cxx:  //  cout << " DrawAllGraph 2DPlot " << GetLess2DPlot() << " LCol= " <<LCol << " GetLessPlot " << GetLessPlot()<< endl;
WFGUI.cxx:  //  cout << wherecut << " wherecut" <<  " " << "LCol = " << LCol << endl;
WFGUI.cxx:  //  cout <<  " dwpot.Getpitch() " << dwpot.Getpitch() << " dwpot.Getwidth() " << dwpot.Getwidth() << endl; 
WFGUI.cxx:  //  cout << "Line1" << endl;
WFGUI.cxx:  // cout << "Line2" << endl;
WFGUI.cxx:  cout << "===== Finished DrawAllGraph ======" << endl;
WFGUI.cxx:	cout << " " << endl;
WFGUI.cxx:	cout << "Plotting the field cutting in x  at " << WhereCut->GetNumber() << endl;
WFGUI.cxx:	    //    cout << " dpoty = " << k*dwpot.GetBinSizey() << " " <<   dpoty[k] << endl;
WFGUI.cxx:	//	cout << " Done Drift" << endl;
WFGUI.cxx:	//	cout << " Done Weighting" << endl;
WFGUI.cxx:	    //  cout <<  k  << " q1[k] " << q1[k] << " Npos " << Npos << endl;	    
WFGUI.cxx:	    // cout << " k = " << k << " : " << dpoty[k] << " " << dwpot.Getdopdensity(k) << endl;
WFGUI.cxx:  cout << "filename state = " << FileNameOn << endl;
WFGUI.cxx:  // cout << "gamma = " << gamma << endl; 
WFGUI.cxx:		cout << "Calculation done with step in y = " << gui->GetStepy() << endl;
WFGUI.cxx:		cout << "Sensor with gain layer, y-step has to be 0.1 micron" << endl;
WFGUI.cxx:		cout << "Calculate the potential again" << endl;
WFGUI.cxx:	//   cout <<  StepYButton[1]->GetState() << "Buttom Stepy 1 "  << endl;
WFGUI.cxx: if (GetDopinggainlayerValue() > 0.001)  cout << "Voltage to deplete gain layer = " << VdepGainLayer*DopingRem << endl;
WFGUI.cxx:  if (VBias < 0) cout << "Warning: underdepleted sensor" << endl;
WFGUI.cxx:  //  cout << Part << endl;
WFGUI.cxx:	  cout <<"Creating output file: "<< fileName << endl;
WFGUI.cxx:	cout <<"Creating output file: "<< fileName << endl;
WFGUI.cxx:  //  cout << "setting step y = "<< val << endl;
WFGUI.cxx:  // cout << "Gain Layer Doping Value = " << DopingValue*1e-6 << " N/cm^3" << endl; 
WFGUI.cxx:  //  cout << " density = " << density << " c= "<< c << endl;
