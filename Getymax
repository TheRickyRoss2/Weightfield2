Carriers.cxx:  //  cout << "Detector Type = " << gui->CallGetDetType()<< endl;
Carriers.cxx:  int bx1 =  1.+pot.GetXMAX()/2-pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:  int bx2 =  1.+pot.GetXMAX()/2-pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:  int bx3 =  1.+pot.GetXMAX()/2-gui->GetSWidth()/2;
Carriers.cxx:  int bx4 =  1.+pot.GetXMAX()/2+gui->GetSWidth()/2;
Carriers.cxx:  int bx5 =  1.+pot.GetXMAX()/2+ pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:  int bx6 =  1.+pot.GetXMAX()/2+ pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:  bool ConstQFlag = gui->GetConstQFlag(); // flag to fix the total charge at (75 pairs per micron)*d
Carriers.cxx:  bool UniformQFlag = gui->GetUniformQFlag(); //flag to have a uniform charge distribution of 75 pairs per micron
Carriers.cxx:  bool UserUniformQFlag = gui->GetUserUniformQFlag(); //flag to have a uniform charge distribution user defined
Carriers.cxx:  bool CoutFlag = (gui->GetBatchOn() == false) ? 1:0; //flag to have a uniform charge distribution of 75 pairs per micron
Carriers.cxx:  int chargescale = gui->GetPrecision();
Carriers.cxx:  gui->GetEllipse()->SetFillStyle(0);
Carriers.cxx:  if (!gui->GetLess2DPlot())
Carriers.cxx:      gui->Getcanvasp()->cd();
Carriers.cxx:      gui->Getdhist()->Draw("COLZ");
Carriers.cxx:      if (gui->GetXMax()>=2) 
Carriers.cxx:      //if (gui->GetAngle()==0) angle =0;
Carriers.cxx:      if ( gui->GetAngle()<45)
Carriers.cxx:	  angle =gui->GetAngle()*(TMath::Pi()/180);
Carriers.cxx:	  if (gui->GetBatchRandomOn())  angle =gui->GetAngle()*(TMath::Pi()/180*gRandom->Gaus());
Carriers.cxx:      else if (gui->GetAngle()>=45) 
Carriers.cxx:      cout<<"Incidente Angle = "<< gui->GetAngle() << " Degrees " << endl;
Carriers.cxx:      if( gui->CallGetDetType() == 0 ||  gui->CallGetDetType() == 2)
Carriers.cxx:      if ( UserUniformQFlag && CoutFlag)   cout << "MIP uniform charge deposition with User Charge = " << gui->GetChargeEntry() << " pairs/micron" << endl;
Carriers.cxx:      if (gui->GetBatchOn()==false) gui->GetEnhist()->Reset();
Carriers.cxx:      for (int PartNum = 0;PartNum< gui->GetNumberP();PartNum++) // loop on the number of particles
Carriers.cxx:		      NPairsPer5Micron[ll] = gui->GetChargeEntry()*5.*exp(-1.*ll*DistHisto/Laser1024Range);
Carriers.cxx:	      //	      << AvPair*pot.GetYMAX()/cos(TMath::Pi()/180*gui->GetAngle()) << endl;	  
Carriers.cxx:	      NormConstFlag = float (AvPair*pot.GetYMAX()/cos(TMath::Pi()/180*gui->GetAngle()) )/float(NTotPairs); //renormalization constant
Carriers.cxx:	      double d = pot.GetYMAX()/cos(TMath::Pi()/180*gui->GetAngle());
Carriers.cxx:	      //  for (int PartNum = 0;PartNum< gui->GetNumberP();PartNum++)
Carriers.cxx:      gui->SetNumPairs(TotPairs);
Carriers.cxx:	  if (mm != ll-1 && gui->GetBatchOn()==false && gui->GetParticleType() != 4 && gui->GetParticleType() != 5) gui->GetEnhist()->Fill(PairsPer5Micron[mm]);
Carriers.cxx:	  //	      gui->GetEnhist()->GetXaxis()->SetRangeUser(0.8*HMin,  HMax*1.2);
Carriers.cxx:	  if (gui->GetBatchOn() == false)  gui->GetEnhist()->GetXaxis()->SetRangeUser(0.,  HMax*1.2);
Carriers.cxx:	  if (!gui->GetLess2DPlot())  gui->Getcanvasp()->cd();
Carriers.cxx:	  double eradius= 2*PairsPer5Micron[mm]*0.003*chargescale/(0.5*gui->GetNumberP());
Carriers.cxx:	  if (!gui->GetLess2DPlot()) 
Carriers.cxx:	    gui->GetEllipse()->DrawEllipse(xangle,Elypos,eradius,eradius,0.,360.,0.);
Carriers.cxx:      if( !gui->GetLess2DPlot()) gui->Getcanvasp()->Update();
Carriers.cxx:  bool CoutFlag = (gui->GetBatchOn() == false) ? 1:0; 
Carriers.cxx:  int bx1 =  1.+pot.GetXMAX()/2-pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:  int bx2 =  1.+pot.GetXMAX()/2-pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:  int bx3 =  1.+pot.GetXMAX()/2-gui->GetSWidth()/2;
Carriers.cxx:  int bx4 =  1.+pot.GetXMAX()/2+gui->GetSWidth()/2;
Carriers.cxx:  int bx5 = 1.+ pot.GetXMAX()/2+ pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:  int bx6 = 1.+ pot.GetXMAX()/2+ pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:  if ( gui->GetAngle()<85) angle =gui->GetAngle()*(TMath::Pi()/180);
Carriers.cxx:  else if (gui->GetAngle()>=85) 
Carriers.cxx:  if (!gui->GetLess2DPlot()) 
Carriers.cxx:      gui->Getcanvasp()->cd();
Carriers.cxx:      gui->Getdhist()->Draw("COLZ");
Carriers.cxx:      if (gui->GetXMax()>=2) 
Carriers.cxx:  gui->SetPrecision(gui->GetPrecision()*ALPHAPRECISION);
Carriers.cxx:  int chargescale = gui->GetPrecision();
Carriers.cxx:      ypos = (double)pot.GetYMAX()- i/((double) pot.Getmipcharge())*gui->GetAlphaRange();
Carriers.cxx:  for (int il = 0; il< gui->GetAlphaRange(); il++)
Carriers.cxx:      if ((int) il % 5 == 0 && 	 !gui->GetLess2DPlot() )
Carriers.cxx:	  gui->Getcanvasp()->cd();
Carriers.cxx:  if (!gui->GetLess2DPlot())   cout << "Updating Canvas, Drawing Ellipses " << endl;
Carriers.cxx:  if (!gui->GetLess2DPlot())   gui->Getcanvasp()->Update(); 
Carriers.cxx:  bool CoutFlag = (gui->GetBatchOn() == false) ? 1:0;
Carriers.cxx:  int bx1 =  1.+pot.GetXMAX()/2-pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:  int bx2 =  1.+pot.GetXMAX()/2-pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:  int bx3 =  1.+pot.GetXMAX()/2-gui->GetSWidth()/2;
Carriers.cxx:  int bx4 =  1.+pot.GetXMAX()/2+gui->GetSWidth()/2;
Carriers.cxx:  int bx5 =  1.+pot.GetXMAX()/2+ pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:  int bx6 =  1.+pot.GetXMAX()/2+ pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:    if ( gui->GetAngle()<45) angle =gui->GetAngle()*(TMath::Pi()/180);
Carriers.cxx:  else if (gui->GetAngle()>=45) 
Carriers.cxx:  if (!gui->GetLess2DPlot()) 
Carriers.cxx:      gui->Getcanvasp()->cd();
Carriers.cxx:      gui->Getdhist()->Draw("COLZ");
Carriers.cxx:      if (gui->GetXMax()>=2) 
Carriers.cxx:  gui->SetPrecision(gui->GetPrecision()*ALPHAPRECISION);
Carriers.cxx:  int chargescale = gui->GetPrecision();
Carriers.cxx:      ypos = i/((double) pot.Getmipcharge() )*gui->GetAlphaRange(); 
Carriers.cxx:  for (int il = 0; il< gui->GetAlphaRange(); il++)
Carriers.cxx:      if ((int) il % 5 == 0 && !gui->GetLess2DPlot())
Carriers.cxx:	  gui->Getcanvasp()->cd();	  
Carriers.cxx:  if (!gui->GetLess2DPlot())   cout << "Updating canvas, Drawing Ellipses " << endl;
Carriers.cxx:  if (!gui->GetLess2DPlot()) gui->Getcanvasp()->Update();
Carriers.cxx:    //    bool CoutFlag = (gui->GetBatchOn() == false) ? 1:0;
Carriers.cxx:    int bx1 =  1.+pot.GetXMAX()/2-pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:    int bx2 =  1.+pot.GetXMAX()/2-pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:    int bx3 =  1.+pot.GetXMAX()/2-gui->GetSWidth()/2;
Carriers.cxx:    int bx4 =  1.+pot.GetXMAX()/2+gui->GetSWidth()/2;
Carriers.cxx:    int bx5 =  1.+pot.GetXMAX()/2+ pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:    int bx6 =  1.+pot.GetXMAX()/2+ pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:    if (!gui->GetLess2DPlot())
Carriers.cxx:        gui->Getcanvasp()->cd();
Carriers.cxx:        gui->Getdhist()->Draw("COLZ");
Carriers.cxx:        if (gui->GetXMax()>=2)
Carriers.cxx:    int chargescale = gui->GetPrecision();
Carriers.cxx:	PairsPer5Micron[ll] = gui->GetChargeEntry()*5.*exp(-1.*il/Laser1024Range);
Carriers.cxx:    if( gui->GetBatchOn()==false)    gui->GetEnhist()->Reset();
Carriers.cxx:	if( gui->GetBatchOn()==false)
Carriers.cxx:	    if (mm != ll-1) gui->GetEnhist()->Fill(PairsPer5Micron[mm]);
Carriers.cxx:		gui->GetEnhist()->GetXaxis()->SetRangeUser(0.,  HMax*1.2);
Carriers.cxx:	double eradius= 2*PairsPer5Micron[mm]*0.003*chargescale/(0.5*gui->GetNumberP());
Carriers.cxx:	if (!gui->GetLess2DPlot() )
Carriers.cxx:	    gui->Getcanvasp()->cd();
Carriers.cxx:    if (!gui->GetLess2DPlot())   cout << "Updating Canvas, Drawing Ellipses " << endl;
Carriers.cxx:    if (!gui->GetLess2DPlot())   gui->Getcanvasp()->Update();
Carriers.cxx:  bool CoutFlag = (gui->GetBatchOn() == false) ? 1:0; 
Carriers.cxx:  int bx1 =  1.+pot.GetXMAX()/2-pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:  int bx2 =  1.+pot.GetXMAX()/2-pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:  int bx3 =  1.+pot.GetXMAX()/2-gui->GetSWidth()/2;
Carriers.cxx:  int bx4 =  1.+pot.GetXMAX()/2+gui->GetSWidth()/2;
Carriers.cxx:  int bx5 =  1.+pot.GetXMAX()/2+ pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:  int bx6 =  1.+pot.GetXMAX()/2+ pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:  if ( gui->GetAngle()<85) angle =gui->GetAngle()*(TMath::Pi()/180);
Carriers.cxx:  else if (gui->GetAngle()>=85) 
Carriers.cxx:  if (!gui->GetLess2DPlot()) 
Carriers.cxx:      gui->Getcanvasp()->cd();
Carriers.cxx:      gui->Getdhist()->Draw("COLZ");
Carriers.cxx:      if (gui->GetXMax()>=2) 
Carriers.cxx:  int chargescale = gui->GetPrecision();
Carriers.cxx:  double eradius= 2*TotPairs/gui->GetXRayRange()*5*0.03;  
Carriers.cxx:  for (int il = 0; il< gui->GetXRayRange(); il++)
Carriers.cxx:      if ((int) il % 5 == 0 && 	 !gui->GetLess2DPlot() )
Carriers.cxx:	  gui->Getcanvasp()->cd();
Carriers.cxx:  if (!gui->GetLess2DPlot())   cout << "Updating Canvas, Drawing Ellipses " << endl;
Carriers.cxx:  if (!gui->GetLess2DPlot())   gui->Getcanvasp()->Update(); 
Carriers.cxx:	//	const char* fileName = (gui->GetFileName())->c_str();
Carriers.cxx:	const char* fileName = (gui->CallSetFileName())->c_str();
Carriers.cxx:	if (gui->GetFileNameOn() ) 
Carriers.cxx:	    if (gui->GetBatchOn()==false)
Carriers.cxx:	double TIMEUNIT= 1.e-9/gui->GetSampling();	//time step in s
Carriers.cxx:	double Temp = gui->GetT();
Carriers.cxx:	int chargescale = gui->GetPrecision();
Carriers.cxx:	float ygainlow =  gui->Getygainlow();
Carriers.cxx:	float ygainhigh =  gui->Getygainhigh();
Carriers.cxx:	//	cout << "Gain starts at = " <<  gui->Getygainlow() <<  " and ends at = " << gui->Getygainhigh() << endl;
Carriers.cxx:	//	GConst = gui->GetGainRatio();
Carriers.cxx:	if(gui->GetBatchOn()==false)
Carriers.cxx:	    	if (gui->GetGainon()==true )
Carriers.cxx:		  //   cout << "Ratio h/e gain = " <<  gui->GetGainRatio() << endl;
Carriers.cxx:	double b_e = gui->GetBetaElectrons();
Carriers.cxx:	double b_h = gui->GetBetaHoles();
Carriers.cxx:	double mu_e = Mu_e(Temp, gui->CallGetDetType());
Carriers.cxx:        double temperature = gui->GetT();
Carriers.cxx:	double mu_h = Mu_h(Temp, gui->CallGetDetType());
Carriers.cxx:	double mu_e_over_v_e = (double) MU_E_300/VESAT_300;//(mu_e/Vsat_e(Temp, gui->CallGetDetType()));
Carriers.cxx:	double mu_h_over_v_h = (double) MU_H_300/VHSAT_300;// (mu_h/Vsat_h(Temp, gui->CallGetDetType()));
Carriers.cxx:	if(gui->GetBatchOn()==false)
Carriers.cxx:	    cout << "V Saturation:  e = " << Vsat_e(Temp, gui->CallGetDetType()) << " [m/s]"<<  "  h = " << Vsat_h(Temp,gui->CallGetDetType() ) << " [m/s]"<<endl;
Carriers.cxx:	if( gui->CallGetDetType() == 0 ||  gui->CallGetDetType() == 2)
Carriers.cxx:	double DCap = (gui->GetSWidth()*gui->GetSWidth())/pot.GetYMAX()*DielConst*8.854e-3; //fF Backplane
Carriers.cxx:	DCap += 0.017*DielConst*4*gui->GetSWidth(); //fF side
Carriers.cxx:	double TRise = gui->GetTRise()*1e-9;
Carriers.cxx:	double TFall = gui->GetTFall()*1e-9;
Carriers.cxx:	double CSATransImp = gui->GetShTrans(); //Transimpedance amplifier 		  
Carriers.cxx:	float CSA_Noise = gui->GetShNoise();
Carriers.cxx:	double BBBW = gui->GetBBBW(); // BB BW
Carriers.cxx:	float BB_Noise = gui->GetBBNoise(); //BB Noise
Carriers.cxx:	int BBGain = gui->GetBBGain(); //BB gain		  
Carriers.cxx:	double BBImp = gui->GetBBImp(); // BB input impedance
Carriers.cxx:	tau_CSA_RC = 1.0e-12*gui->GetCSAImp()*gui->GetCDet(); //
Carriers.cxx:	tau_C50 = 1.0e-12*50.*gui->GetCDet(); //Oscil. RC
Carriers.cxx:	tau_BW = 0.35/(1.0e9*gui->GetOscBW())/2.2; // Oscil. RC
Carriers.cxx:	tau_BB_RC = 1.0e-12*BBImp*gui->GetCDet(); // BB RC
Carriers.cxx:	float Inductance = gui->GetLDet()*1.0e-9;
Carriers.cxx:	omega_BB_LCR = 1./pow(Inductance*gui->GetCDet()*1.0e-12,0.5); 
Carriers.cxx:	alpha_CSA_LCR = gui->GetCSAImp()/(2.*Inductance);
Carriers.cxx:	omega_CSA_LCR = 1./pow(Inductance*gui->GetCDet()*1.0e-12,0.5); 
Carriers.cxx:	omega_Osc_LCR = 1./pow(Inductance*gui->GetCDet()*1.0e-12,0.5); 
Carriers.cxx:	tau = sqrt( pow( (double) ((0.35/(1.0e9*gui->GetOscBW()))/2.2),2.0) + pow( (double) ((1.0e-12*gui->GetCSAImp()*gui->GetCDet())),2.0));
Carriers.cxx:	if (gui->GetOscOn()==true  && gui->GetBatchOn()==false)
Carriers.cxx:	    cout << "Oscilloscope  BW = " << gui->GetOscBW() << " GHz" << endl;
Carriers.cxx:	if (gui->GetOscOn()==true)
Carriers.cxx:	if (gui->GetCalibFlag()) goto CALIB;
Carriers.cxx:	gui->Getchist()->SetMarkerColor(2);
Carriers.cxx:	gui->Getchist()->SetMarkerStyle(2);
Carriers.cxx:	gui->Getchist()->SetMarkerSize(0.1);
Carriers.cxx:	gui->Getchhist()->SetMarkerColor(4);
Carriers.cxx:	gui->Getchhist()->SetMarkerStyle(4);
Carriers.cxx:	gui->Getchhist()->SetMarkerSize(0.1);
Carriers.cxx:	gui->Getctothist()->SetMarkerColor(3);
Carriers.cxx:	gui->Getctothist()->SetMarkerStyle(3);
Carriers.cxx:	gui->Getctothist()->SetMarkerSize(0.1);
Carriers.cxx:	    if (gui->Getstopped()==true) 
Carriers.cxx:	    gui->Getchist()->Reset();
Carriers.cxx:	    gui->Getchhist()->Reset();
Carriers.cxx:	    gui->Getctothist()->Reset();
Carriers.cxx:	    //	  cout << i << " -20 " << gui->Getchist()->GetMaximumStored() << endl;
Carriers.cxx:	    if(i==0 && gui->GetBatchOn()== true)
Carriers.cxx:		if (gui->GetParticleType() != 8)  gui->GetEnhist()->Fill(firstfreeslot/2*chargescale/pot.GetYMAX());
Carriers.cxx:		else  gui->GetEnhist()->Fill(firstfreeslot/2*chargescale/pot.GetXMAX());
Carriers.cxx:		    if (gui->GetChargeCloud() && (gui->GetParticleType() != 4 && gui->GetParticleType() != 5) )
Carriers.cxx:			ExChargeCloud = gui->GetExhist()->GetBinContent((int)carriers[j].Getx(), (int)carriers[j].Gety());
Carriers.cxx:			//	cout << (int)carriers[j].Getx() << " " <<  (int)carriers[j].Gety() << " " << gui->GetExhist()->GetBinContent((int)carriers[j].Getx(), (int)carriers[j].Gety()) << endl;
Carriers.cxx:			if(gui->Getdiffusionon()
Carriers.cxx:			if(gui->Getdiffusionon() && (carriers[j].Gety() <ygainlow-1 || carriers[j].Gety() > ygainhigh+1 )) 
Carriers.cxx:		      gui->Getchhist()->Fill((int) xnew, (int) ynew ,  1.*chargescale);
Carriers.cxx:		      gui->Getctothist()->Fill((int) xnew, (int) ynew , 1.*chargescale);
Carriers.cxx:		      gui->Getchist()->Fill((int) xnew, (int) ynew , 1.*chargescale);
Carriers.cxx:		      gui->Getctothist()->Fill((int) xnew, (int) ynew , -1.*chargescale);
Carriers.cxx:		    if (gui->GetGainon() &&   (ynewInside || yoldInside)   )
Carriers.cxx:			//			gain =  exp(gui->GetGainvalue(LocalE, carriers[j].GetCharge() )*d*GRIDDIST)-1.;
Carriers.cxx:			gain =  exp(gui->GetGainvalue(LocalE, carriers[j].GetCharge() )*d*1e-6)-1.;
Carriers.cxx:			//gain =  exp(gui->GetGainvalue(LocalE, -1 )*d*GRIDDIST)-1.;
Carriers.cxx:			if (firstfreeslot > gui->GetDimMaxCarriers()) 
Carriers.cxx:		    if(gui->GetChargeCloud() && (gui->GetParticleType() != 4 && gui->GetParticleType() != 5))
Carriers.cxx:		    if (gui->GetCCEOn()){
Carriers.cxx:		      double temperature = gui->GetT();// in K
Carriers.cxx:			cout << "CCE effects on, Fluence = " << gui->GetFluence() << " [10^14 neq /cm^2]" << endl;
Carriers.cxx:		      double fluence = gui->GetFluence()*1e-13;//get fluence from gui in units of 10 ^13 neq/cm^2 (equivalent 1Mev neutron following NIEL)
Carriers.cxx:		    if ((ynew>=ELECTRODE_DEPTH) && (ynew<=pot.GetYMAX()-ELECTRODE_DEPTH) && gui->GetCCEOn() == 0)
Carriers.cxx:	    if ( gui->GetChargeCloud() || gui->GetShowCur()  )
Carriers.cxx:		gui->GetExhist()->Reset();
Carriers.cxx:			LocalQy = gui->Getctothist()->GetBinContent(xq,yq);
Carriers.cxx:			      gui->GetExhist()->Fill((int) (xq+ilx), (int) (yq) , LocalEx );
Carriers.cxx:	    if (gui->Getabscuron())	
Carriers.cxx:		if (gui->GetBatchOn()==false)
Carriers.cxx:	    if (gui->GetBatchOn()==false)
Carriers.cxx:		//		if (fabs(itot[i])>1e-9)  gui->GetProgressBar()->Increment(TIMEUNIT*1e9);
Carriers.cxx:		    gui->GetCalculatingLabel()->SetTitle(ss.str().c_str()); // update progess label title	
Carriers.cxx:	    if (gui->GetShowCur())
Carriers.cxx:			gui->Getcanvaspc()->Clear();
Carriers.cxx:			if (ShowField) gui->Getcanvaspc()->Divide(3,1,0.004,0.004);
Carriers.cxx:			else gui->Getcanvaspc()->Divide(2,1,0.004,0.004);
Carriers.cxx:			gui->Getcanvaspc()->cd(1);
Carriers.cxx:			gui->Getcanvaspc()->cd(2);
Carriers.cxx:			    gui->Getcanvaspc()->cd(3);
Carriers.cxx:			    gui->GetExhist()->SetStats(0);
Carriers.cxx:			    gui->GetExhist()->SetTitle("Charge Cloud E Field  V/m");
Carriers.cxx:			HistoMax = 35*gui->GetYGain();
Carriers.cxx:			  //gui->Getchist()->GetBinContent(gui->Getchist()->GetMaximumBin())*gui->GetYGain()/2;
Carriers.cxx:			gui->Getchist()->SetMaximum(HistoMax);
Carriers.cxx:			gui->Getchist()->SetStats(0);
Carriers.cxx:			gui->Getchist()->SetTitle(" e^{-} Charge Distribution"); 
Carriers.cxx:			gui->Getchist()->GetXaxis()->SetTitleSize(0.05);		// set title of x-axis
Carriers.cxx:		       	gui->Getchist()->GetYaxis()->SetTitleSize(0.05);		// set title of x-axis	
Carriers.cxx:			gui->Getchist()->GetXaxis()->SetLabelSize(0.045);		// set title of x-axis
Carriers.cxx:			gui->Getchist()->GetYaxis()->SetLabelSize(0.045);		// set title of x-axis
Carriers.cxx:			gui->Getchhist()->SetMaximum(HistoMax);
Carriers.cxx:			gui->Getchhist()->SetStats(0);
Carriers.cxx:			gui->Getchhist()->SetTitle("h^{+} Charge Distribution");
Carriers.cxx:			gui->Getchhist()->GetXaxis()->SetTitleSize(0.05);		// set title of x-axis
Carriers.cxx:			gui->Getchhist()->GetYaxis()->SetTitleSize(0.05);		// set title of x-axis	
Carriers.cxx:			gui->Getchhist()->GetXaxis()->SetLabelSize(0.045);		// set title of x-axis
Carriers.cxx:			gui->Getchhist()->GetYaxis()->SetLabelSize(0.045);		// set title of x-axis
Carriers.cxx:			//			if ( gui->GetChargeCloud() && (gui->GetParticleType() != 4 && gui->GetParticleType() != 5)) Hoffset = 40;
Carriers.cxx:			//else if (!gui->GetChargeCloud() )
Carriers.cxx:			gui->Getchist()->GetXaxis()->SetRange((int) xqmin-Hoffset, (int) xqmax+Hoffset);
Carriers.cxx:			gui->Getchhist()->GetXaxis()->SetRange((int) xqmin-Hoffset, (int) xqmax+Hoffset);
Carriers.cxx:			gui->Getchist()->GetYaxis()->SetRange((int) 0, (int)  pot.GetXMAX());
Carriers.cxx:			gui->Getchhist()->GetYaxis()->SetRange((int) 0, (int) pot.GetXMAX());
Carriers.cxx:			gui->GetExhist()->GetYaxis()->SetRange((int) 0, (int) pot.GetXMAX());
Carriers.cxx:			int bx1 =  1.+pot.GetXMAX()/2-pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:			int bx2 =  1.+pot.GetXMAX()/2-pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:			int bx3 =  1.+pot.GetXMAX()/2-gui->GetSWidth()/2;
Carriers.cxx:			int bx4 =  1.+pot.GetXMAX()/2+gui->GetSWidth()/2;
Carriers.cxx:			int bx5 =  1.+pot.GetXMAX()/2+ pot.Getpitch() - gui->GetSWidth()/2;
Carriers.cxx:			int bx6 =  1.+pot.GetXMAX()/2+ pot.Getpitch() + gui->GetSWidth()/2;
Carriers.cxx:		    gui->Getcanvaspc()->cd(1);
Carriers.cxx:		    gui->Getchist()->Draw("COLZ BB FB");
Carriers.cxx:		    //		    gui->Getdhist()->Draw("SAME COT2N");
Carriers.cxx:		    if (gui->GetXMax()>=2) 
Carriers.cxx:		    gui->Getcanvaspc()->cd(2);
Carriers.cxx:		    gui->Getchhist()->Draw("COLZ");		
Carriers.cxx:		    if (gui->GetXMax()>=2) 
Carriers.cxx:			gui->Getcanvaspc()->cd(3);
Carriers.cxx:			gui->GetExhist()->Draw("COLZ");
Carriers.cxx:		    gui->Getcanvaspc()->Update();
Carriers.cxx:		    //		    gui->Getcanvasp()->cd();
Carriers.cxx:		    //  gui->Getcanvasp()->Update();
Carriers.cxx:	gui->GetCalculatingLabel()->SetBackgroundColor(0x00ff00);
Carriers.cxx:	//	gui->GetCalculatingLabel()->SetTitle("Done.");
Carriers.cxx:	gui->GetCalculatingLabel()->SetTitle(ss.str().c_str()); // update progess label title		
Carriers.cxx:	if (!gui->GetShowCur() && gui->GetBatchOn()==false)
Carriers.cxx:	    //	    if ( gui->GetParticleType() != 4  || gui->GetParticleType() != 5 || gui->GetParticleType() != 9 ) // no plots for alpha
Carriers.cxx:	    if (gui->GetParticleType() <4 || gui->GetParticleType() == 6 ||  gui->GetParticleType() == 8)
Carriers.cxx:		gui->Getcanvaspc()->Clear();				
Carriers.cxx:		//		gui->Getcanvaspc()->Divide(1,1,0.004,0.004);   
Carriers.cxx:		gui->Getcanvaspc()->cd(1);
Carriers.cxx:		gui->GetEnhist()->SetTitle("# of e/h in each 5 micron interval");
Carriers.cxx:		gui->GetEnhist()->GetXaxis()->SetTitle("Average # of e/h in each 5 micron interval");
Carriers.cxx:		gui->GetEnhist()->GetYaxis()->SetTitle("Entries");			
Carriers.cxx:		gui->GetEnhist()->Draw();
Carriers.cxx:	    gui->Getcanvaspc()->Update();
Carriers.cxx:	//	if ( gui->GetConstQFlag() && !gui->GetUniformQFlag())
Carriers.cxx:	if( gui->CallGetDetType() == 0 ||  gui->CallGetDetType() == 2)
Carriers.cxx:		if (gui->GetParticleType() ==  6 || gui->GetParticleType() == 8 ) Pair = gui->GetChargeEntry();
Carriers.cxx:	    if (gui->GetParticleType() ==  2) // to be sure there is no timewalk due to amplitude fluctuations
Carriers.cxx:		QAverage = gui->GetNumberP()*ECHARGE*float (Pair*pot.GetYMAX()/cos(TMath::Pi()/180*gui->GetAngle()) );
Carriers.cxx:	    //	    GainScale =  (gui->GetYGain()-1.)/( (float) (qtot/(ChargeScale*(qe+qh))-1.);
Carriers.cxx:	    else 	    GainScale =  (gui->GetYGain()-1.)/( (float) (qtot/(qe+qh))-1.);
Carriers.cxx:	    if (!gui->GetForceGain())
Carriers.cxx:	    //	if (gui->CallSetPart() != 1)
Carriers.cxx:	    if (gui->GetForceGain())  cout << "Forced gain: Gain in simulation = " << qtot/(qe+qh)  <<  " Gain after corrections  = " << GainScale*(qeg+qhg)/(qe+qh)+1 << " Gain requested = "<< gui->GetYGain()  << endl;
Carriers.cxx:	if (gui->GetCalibFlag())
Carriers.cxx:		else if (i*(TIMEUNIT*1e9)<1.+gui->GetCalibEntry()) 
Carriers.cxx:	    ss << " Done: Current pulse is "<< gui->GetCalibEntry() << " ns long " ;
Carriers.cxx:	    gui->GetCalculatingLabel()->SetBackgroundColor(0x00ff00);
Carriers.cxx:	    //	gui->GetCalculatingLabel()->SetTitle("Done.");
Carriers.cxx:	    gui->GetCalculatingLabel()->SetTitle(ss.str().c_str()); // update progess label title		
Carriers.cxx:	if (gui->GetOscOn()==true)  //if scope=on,
Carriers.cxx:		if ( (k<IMax && fabs(qtot_sh[k])>0) || ((k<IMax && fabs(qtot_sh[k])>=0) && gui->GetCalibFlag()))  CSAOut[k]=fabs(qtot_sh[k])*1e15;
Carriers.cxx:	    gui->SetCSATVth(0.);
Carriers.cxx:	    gui->SetCSAFTVth(0.);
Carriers.cxx:	    gui->SetBBTVth(0.);
Carriers.cxx:	    gui->SetBBFTVth(0.);
Carriers.cxx:	    double BBVth = gui->GetBBVth(); // in mV
Carriers.cxx:	    double CSAVth = gui->GetCSAVth(); // in mV
Carriers.cxx:		    gui->SetCSATVth(STime);
Carriers.cxx:		    gui->SetJitter(Jitter);
Carriers.cxx:		    gui->SetBBJitter(BBJitter);				  
Carriers.cxx:		    gui->SetBBTVth(STime);
Carriers.cxx:		    gui->SetCSAFTVth((double) i*TIMEUNIT*1e9);
Carriers.cxx:		    gui->SetFJitter( CSA_Noise/dVdt);
Carriers.cxx:		    gui->SetBBFTVth((double) i*TIMEUNIT*1e9);
Carriers.cxx:	    cout << "CSA VTh Time Crossing =  " << gui->GetCSATVth() <<  " and " << gui->GetCSAFTVth() << " [ns]" << endl;
Carriers.cxx:	    cout << "BB VTh Time Crossing =  " << gui->GetBBTVth() <<  " and " << gui->GetBBFTVth() << " [ns]" << endl;
Carriers.cxx:	    cout << "BB Charge = " << 1000*fabs(BBArea*1e9)/(gui->GetBBGain()*gui->GetBBImp()) << " [fC]" << endl;
Carriers.cxx:	    if (gui->GetOscOn()==true)  //if scope=on,
Carriers.cxx:	    if (gui->GetOscOn()==true)  //if scope=on,
Carriers.cxx:	if ( gui->GetFileNameOn())
Carriers.cxx:	    IPrint = (gui->GetOscOn()) ? IMaxSh : IMax;
Carriers.cxx:		    if (gui->GetOscOn()==true)
Carriers.cxx:		    //		    if (gui->GetOscOn()==true) fprintf(pfile,"%E    %E    %E    %E    %E    %E    %E    %E    %E\n",(i+1)*TIMEUNIT*1e9+10.,
Carriers.cxx:		    if (gui->GetOscOn()==true) fprintf(pfile,"%f    %f    %f   %f    %f    %f    %f    %f    %f\n",(i+1)*TIMEUNIT*1e9+5.,
Carriers.cxx:	if (gui->GetParticleType() != 7 )
Carriers.cxx:	gui->Getcurcanvas()->cd();				// change to canvas
Carriers.cxx:	//	    if (gui->GetOscOn()==true)
Carriers.cxx:	gui->Getcurcanvas()->cd();				// change to canvas
Carriers.cxx:	gui->Getcurcanvas()->cd();
Carriers.cxx:	gui->Getcurcanvas()->cd();
Carriers.cxx:	if (gui->GetGainon()==true)
Carriers.cxx:	    gui->Getcurcanvas()->cd();
Carriers.cxx:	    gui->Getcurcanvas()->cd();
Carriers.cxx:	if (gui->GetOscOn()==true)
Carriers.cxx:	    gui->Getcurcanvas()->cd();
Carriers.cxx:	    gui->Getcurcanvas()->cd();
Carriers.cxx:	    gui->Getcurcanvas()->cd();
Carriers.cxx:	if(gui->GetBatchOn()==false)
Carriers.cxx:	    if (gui->GetOscOn()==true)
Carriers.cxx:		gui->Getosccanvas()->Clear();
Carriers.cxx:		gui->Getosccanvas()->Divide(1,2,0.002,0.002);
Carriers.cxx:		gui->Getosccanvas()->Update();
Carriers.cxx:		gui->Getosccanvas()->cd(1);
Carriers.cxx:		//		gui->Getosccanvas()->cd(1);
Carriers.cxx:		//		gui->Getosccanvas()->cd(2);
Carriers.cxx:		TVirtualPad *c1_1 = gui->Getosccanvas()->cd(2);
Carriers.cxx:		//gui->Getosccanvas()->cd(2);
Carriers.cxx:		gui->Getosccanvas()->Update();
Carriers.cxx:		gui->Getosccanvas()->cd(4);
Carriers.cxx:		//		gui->Getosccanvas()->Update();
Carriers.cxx:		gui->Getosccanvas()->Update();
Carriers.cxx:	    //gui->SetQLabel(qestring,qhstring,qehstring,qegstring,qhgstring,qehgstring);	// Update Labels in gui
Carriers.cxx:	    gui->SetQLabel(qestring,qhstring,qehstring,qegstring,qhgstring,qehgstring,qetotstring,qhtotstring,qtotstring);
Carriers.cxx:	    gui->SetAngleLabel(ethetastring,hthetastring);
Carriers.cxx:	if(gui->GetFileNameOn())
Potentials.cxx:  if (vdepl>vbias && !gui->GetDJOn() && ( ( bulk==PTYPE && strips == NTYPE )  || ( bulk==NTYPE && strips == PTYPE ))) YMIN = YMAX-YMAX*sqrt(vbias)/sqrt(vdepl);
Potentials.cxx:  if (vdepl>vbias && !gui->GetDJOn() && ( ( bulk==PTYPE && strips == PTYPE )  || ( bulk==NTYPE && strips == NTYPE ))) YMAXVD = YMAX*sqrt(vbias)/sqrt(vdepl);
Potentials.cxx:  //GainLayerpoissonf = ((bulk==PTYPE) ? -1.0 : 1.0)*gui->GetDopinggainlayerValue()*ECHARGE/(EPSILON*EPSILONR); // gain layer always as the bulk type p type = negative
Potentials.cxx:  if (  gui->GetAcceptorCreation())  Acceptorpoissonf =  -gfluence*gui->GetFluence()*1e6*ECHARGE/(EPSILON*EPSILONR); //always p-type, NEGATIVE
Potentials.cxx:  //DopingAdd = gui->GetDopinggainlayerValue()*ECHARGE/(EPSILON*EPSILONR);
Potentials.cxx:   if (gui->GetAcceptorRemoval() && (bulk==PTYPE))
Potentials.cxx:       AccRem = gui->InitialAccRem(  poissonf*(EPSILON*EPSILONR)/ECHARGE*1e-6, gui->GetFluence() );
Potentials.cxx:      if(gui->Getstopped()==1) {
Potentials.cxx:      //      if (gui->GetDJOn())
Potentials.cxx:      if (gui->GetDJOn())
Potentials.cxx:	  DJCoef = gui->GetDJValue();
Potentials.cxx:	  ehratio = gui->GetDJehValue();
Potentials.cxx:	  //	  cout << "DJ ON" << DJCoef << " CallgetDJ= " << gui->CallGetDJ() << endl;
Potentials.cxx:      //      cout << " Bulk = "<< gui->CallGetDopingBulk() << " Strip = " << gui->CallGetDopingStrip() << endl;
Potentials.cxx:      //       cout << " Low = "<< gui->Getygainlayerlow() << " High  = " << gui->Getygainlayerhigh() << endl;
Potentials.cxx:	  if (gui->CallGetDJType() == 0 && gui->GetDJOn())
Potentials.cxx:	  else if (gui->CallGetDJType() == 1 && gui->GetDJOn())
Potentials.cxx:      //	= ((bulk==PTYPE) ? -1.0 : 1.0)*gui->GetDopinggainlayerValue()*ECHARGE/(EPSILON*EPSILONR); << endl;
Potentials.cxx:		  if (gui->CallGetDetType() == 0 || gui->CallGetDetType() == 2)
Potentials.cxx:	  if(it%N==0 && gui->Getplotupdate()==1 && gui->Getstopped()==0)	// do plot update every N iterations
Potentials.cxx:	      //gui->DrawHist();
Potentials.cxx:	      gui->Getdhist()->Reset();	//Reset histogram. dhist1 = histogram of drift potential
Potentials.cxx:	      //      gui->Getdhist()->TH2F::SetBins((XMAX),-(XMAX)*0.5,(XMAX)*0.5,(YMAX),-(YMAX)*0.5,(YMAX)*0.5); // set bins of histogram
Potentials.cxx:	      gui->Getdhist()->TH2F::SetBins((XMAX),0.,XMAX,YMAX,0,YMAX); // set bins of histogram
Potentials.cxx:	      gui->Getdhist()->GetXaxis()->SetTitle("x [um]");
Potentials.cxx:	      gui->Getdhist()->GetYaxis()->SetTitle("y [um]");
Potentials.cxx:	      gui->Getwhist()->Reset();	//whist1 = histogram of weighting potential					
Potentials.cxx:	      gui->Getwhist()->TH2F::SetBins(XMAX,0,XMAX,YMAX, 0,YMAX);
Potentials.cxx:		  gui->Getdhist()->SetBinContent(i+1,j+1,newpot.dpot[j][i]);
Potentials.cxx:		  gui->Getwhist()->SetBinContent(i+1,j+1,newpot.wpot[j][i]);
Potentials.cxx:	      cout << " Potentials 2DPlot " << gui->GetLess2DPlot() << endl;
Potentials.cxx:	      gui->DrawAllGraph(0);
Potentials.cxx:	      /*	      if (!gui->GetLess2DPlot()) 
Potentials.cxx:			      gui->Getcanvasp()->cd();
Potentials.cxx:			      gui->Getdhist()->SetStats(0);	// hide statistics box
Potentials.cxx:			      gui->Getdhist()->Draw("COLZ"); // draw histogram				
Potentials.cxx:			      gui->Getcanvasw()->cd();
Potentials.cxx:			      gui->Getwhist()->SetStats(0);
Potentials.cxx:			      gui->Getwhist()->Draw("COLZ");
Potentials.cxx:			      gui->Getcanvasp()->Update();
Potentials.cxx:			      gui->Getcanvasw()->Update();
Potentials.cxx:      ///} // end of if(gui-<Getstopped()==0)
Potentials.cxx:  gui->GetCalculatingLabel2()->SetTitle(gridlabel2);
Potentials.cxx:  gui->GetCalculatingLabel()->SetTitle(gridlabel);
Potentials.cxx:    gui->GetCalculatingLabel2()->SetTitle(gridlabel2);
Potentials.cxx:    gui->GetCalculatingLabel()->SetTitle(gridlabel);
Potentials.cxx:  gui->Getdhist()->GetXaxis()->SetLabelColor(1);	
Potentials.cxx:  gui->Getwhist()->GetYaxis()->SetLabelColor(1);
Potentials.cxx:  if (gui->GetDopinggainlayerValue() > 0.001)
Potentials.cxx:      cout << "Gain layer region: " << gui->Getygainlayerlow() << " - " << gui->Getygainlayerhigh() << " micron " << endl;
Potentials.cxx:      double VdepGainLayer=  gui->GetDopinggainlayerValue()*ECHARGE/(2*EPSILON*EPSILONR)*1e-12;
Potentials.cxx:      if (gui->GetAcceptorRemoval() && (bulk==PTYPE) )
Potentials.cxx:	  AccRem = gui->InitialAccRem(gui->GetDopinggainlayerValue()*1e-6 , gui->GetFluence() );
Potentials.cxx:	  //	  cout << " Inital Acceptor Removal Gain Layer = " << AccRem << " Initial Doping: " << gui->GetDopinggainlayerValue()*1e-6  << endl;
Potentials.cxx:	    " Final gain layer doping: " <<  ((bulk==PTYPE) ? -1.0 : 1.0)*AccRem*gui->GetDopinggainlayerValue()*1e-6  << endl;
Potentials.cxx:	  if  (y  >= gui->Getygainlayerlow())
Potentials.cxx:	      if (y  < gui->Getygainlayerhigh() )
Potentials.cxx:		  dopdensity[y] +=  ((bulk==PTYPE) ? -1.0 : 1.0)*AccRem*gui->GetDopinggainlayerValue()*1e-6;
Potentials.cxx:		  dd = y-gui->Getygainlayerlow()+1;
Potentials.cxx:	      //	      cout << "Gain Recess = " << gui->GetGainRecess() << endl;
Potentials.cxx:	      for(int x=0; x<XMAX-gui->GetGainRecess();x++)
Potentials.cxx:			  if (dpot[YMAX-1][x]== vbias && dpot[YMAX-1][x - gui->GetGainRecess()]  == vbias && dpot[YMAX-1][x+ gui->GetGainRecess()] == vbias )
Potentials.cxx:			  if (dpot[YMAX-1][x]== 0 && dpot[YMAX-1][x - gui->GetGainRecess()]  == 0 && dpot[YMAX-1][x+ gui->GetGainRecess()] == 0 )
Potentials.cxx:     if (gui->GetAcceptorRemoval() && (bulk==PTYPE) )
Potentials.cxx:       AccRem = gui->InitialAccRem(  poissonf*(EPSILON*EPSILONR)/ECHARGE*1e-6, gui->GetFluence() );
WFGUI.cxx:	gui->SetAllButton(0);
WFGUI.cxx:	gui->CallCalculatePotentials();
WFGUI.cxx:	gui->ThreadstopPotential();
WFGUI.cxx:	gui->DrawAllGraph(1);
WFGUI.cxx:	gui->SetAllButton(1);
WFGUI.cxx:	//gui->DrawFieldsAbs();
WFGUI.cxx:	gui->CallCalculateCurrents();
WFGUI.cxx:	gui->ThreadstopCurrents();
WFGUI.cxx:	gui->stopped=false;
